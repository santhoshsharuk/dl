Here’s a simple example of object detection using TensorFlow with a pre-trained model from the TensorFlow Model Zoo (e.g., SSD MobileNet V2) and evaluation on PASCAL VOC or COCO-style dataset.


---

1. Install Dependencies

pip install tensorflow opencv-python tensorflow-hub


---

2. Load Pre-trained Object Detection Model

import tensorflow as tf
import tensorflow_hub as hub
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load a pre-trained SSD MobileNet V2 model from TensorFlow Hub
model = hub.load("https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2")

# Load COCO labels
labels = {1: 'person', 2: 'bicycle', 3: 'car', 4: 'motorcycle', 5: 'airplane', 6: 'bus',
          7: 'train', 8: 'truck', 9: 'boat', 10: 'traffic light'}

# Load image and preprocess
image_path = "test_image.jpg"  # your image file here
img = cv2.imread(image_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img_resized = tf.image.resize(img_rgb, (320, 320)) / 255.0
input_tensor = tf.expand_dims(img_resized, 0)

# Run model
result = model(input_tensor)
result = {key: value.numpy() for key, value in result.items()}

# Draw boxes
for i in range(len(result['detection_scores'])):
    if result['detection_scores'][i] > 0.5:
        box = result['detection_boxes'][i]
        class_id = int(result['detection_classes'][i])
        y1, x1, y2, x2 = box
        h, w, _ = img.shape
        cv2.rectangle(img, (int(x1*w), int(y1*h)), (int(x2*w), int(y2*h)), (0, 255, 0), 2)
        label = labels.get(class_id, 'N/A')
        cv2.putText(img, label, (int(x1*w), int(y1*h - 10)), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,255,0), 2)

# Show result
cv2.imshow("Detection", img)
cv2.waitKey(0)
cv2.destroyAllWindows()


---

Evaluation on VOC/COCO

If you want to train or evaluate on full COCO or VOC datasets, it’s best to use the TensorFlow Object Detection API, which supports training and evaluation pipelines.

Would you like a full setup guide for custom training and evaluation using the official TensorFlow Object Detection API on VOC/COCO datasets?

