Here's a simple example to fine-tune a pre-trained MobileNetV2 model on a small custom dataset (e.g., Cats vs. Dogs) using TensorFlow and Keras.


---

1. Install TensorFlow

pip install tensorflow


---

2. Dataset Preparation

Organize your dataset like this:


dataset/
├── train/
│   ├── cats/
│   └── dogs/
├── validation/
│   ├── cats/
│   └── dogs/


---

3. Python Code to Fine-Tune MobileNetV2

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam

# Image size and path
IMAGE_SIZE = (160, 160)
train_dir = 'dataset/train'
val_dir = 'dataset/validation'

# Data preprocessing
train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen = ImageDataGenerator(rescale=1./255)

train_data = train_datagen.flow_from_directory(
    train_dir,
    target_size=IMAGE_SIZE,
    batch_size=32,
    class_mode='binary'
)

val_data = val_datagen.flow_from_directory(
    val_dir,
    target_size=IMAGE_SIZE,
    batch_size=32,
    class_mode='binary'
)

# Load pre-trained MobileNetV2
base_model = MobileNetV2(input_shape=(160, 160, 3),
                         include_top=False,
                         weights='imagenet')
base_model.trainable = False  # Freeze base model

# Add custom classification head
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
output = Dense(1, activation='sigmoid')(x)

model = Model(inputs=base_model.input, outputs=output)

# Compile the model
model.compile(optimizer=Adam(),
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_data, validation_data=val_data, epochs=5)

# Optional: Fine-tune base_model by unfreezing and re-training
base_model.trainable = True
model.compile(optimizer=Adam(1e-5),  # smaller learning rate
              loss='binary_crossentropy',
              metrics=['accuracy'])
model.fit(train_data, validation_data=val_data, epochs=3)

# Save the model
model.save("fine_tuned_mobilenetv2.h5")


---

Output

Found 2000 images belonging to 2 classes.
Found 500 images belonging to 2 classes.
Epoch 1/5
...
Validation accuracy: 0.93

Would you like a script to predict with this trained model on new images?

