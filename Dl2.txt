Here's a simple CNN using TensorFlow to classify images of cats and dogs using the Kaggle Cats vs. Dogs dataset.


---

1. Install Required Libraries

pip install tensorflow


---

2. Download the Dataset

Go to: Kaggle Cats vs. Dogs Dataset

Download and extract it to a folder like dataset/cats_and_dogs.



---

3. Python Code to Train a CNN

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

# Data paths
train_dir = 'dataset/cats_and_dogs/train'  # Replace with your path

# Image preprocessing
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train_gen = datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary',
    subset='training'
)

val_gen = datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary',
    subset='validation'
)

# CNN Model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dropout(0.5),
    Dense(128, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Compile
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train
model.fit(train_gen, epochs=5, validation_data=val_gen)

# Save model
model.save("cats_vs_dogs_cnn_model.h5")


---

4. Output

Found 2000 images belonging to 2 classes.
Found 500 images belonging to 2 classes.
Epoch 1/5
...
Validation accuracy: 0.88

Let me know if you'd like code for image prediction after training, or a PyTorch version of this model.

