Here's a simple example of sentiment analysis using a Recurrent Neural Network (RNN) with LSTM in TensorFlow/Keras on the IMDb movie reviews dataset.


---

1. Install TensorFlow

pip install tensorflow


---

2. Python Code: RNN for Sentiment Classification

import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Load IMDb dataset (binary sentiment: 0 = negative, 1 = positive)
vocab_size = 10000
maxlen = 200

(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=vocab_size)

# Pad sequences to ensure equal length
x_train = pad_sequences(x_train, maxlen=maxlen)
x_test = pad_sequences(x_test, maxlen=maxlen)

# Build the RNN model
model = Sequential([
    Embedding(vocab_size, 64, input_length=maxlen),
    LSTM(64),
    Dense(1, activation='sigmoid')  # Output layer for binary classification
])

# Compile the model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

# Train the model
model.fit(x_train, y_train, epochs=3, batch_size=64, validation_split=0.2)

# Evaluate on test data
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Test Accuracy: {accuracy:.4f}")


---

Output Example

Epoch 1/3
...
Test Accuracy: 0.8652


---

Optional: Transformer Version

If you'd prefer using a Transformer model like BERT, I can provide a Hugging Face Transformers version. Would you like that too?
