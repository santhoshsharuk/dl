import tensorflow as tf
from tensorflow.keras import layers
import numpy as np
import matplotlib.pyplot as plt

LATENT_DIM = 100

# Build generator model
def build_generator():
    model = tf.keras.Sequential([
        layers.Dense(7*7*256, use_bias=False, input_shape=(LATENT_DIM,)),
        layers.BatchNormalization(),
        layers.LeakyReLU(),
        layers.Reshape((7, 7, 256)),
        layers.Conv2DTranspose(128, (5, 5), strides=(1, 1), padding='same', use_bias=False),
        layers.BatchNormalization(),
        layers.LeakyReLU(),
        layers.Conv2DTranspose(64, (5, 5), strides=(2, 2), padding='same', use_bias=False),
        layers.BatchNormalization(),
        layers.LeakyReLU(),
        layers.Conv2DTranspose(1, (5, 5), strides=(2, 2), padding='same', use_bias=False, activation='sigmoid')
    ])
    return model

# Initialize generator
generator = build_generator()

# Generate fake images from random noise
def generate_images():
    noise = tf.random.normal([16, LATENT_DIM])
    generated = generator(noise, training=False).numpy().squeeze()

    # Plot 4x4 grid
    fig, axes = plt.subplots(4, 4, figsize=(4, 4))
    for i in range(4):
        for j in range(4):
            axes[i, j].imshow(generated[i*4 + j], cmap='gray')
            axes[i, j].axis('off')
    plt.show()

# Show output
generate_images()
